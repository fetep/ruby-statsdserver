#!/usr/bin/env ruby

$: << File.join(File.dirname(__FILE__), "..", "lib")

require "rubygems"

require "daemons"
require "parseconfig"
require "statsdserver"
require "statsdserver/output/amqp"
require "statsdserver/output/tcp"
require "statsdserver/output/stdout"
require "sysexits"

include Sysexits
progname = File.basename($0)

if ARGV.length != 1
  $stderr.puts "usage: #{progname} path_to_config"
  exit EX_USAGE
end

config_path = ARGV.shift
begin
  config_file = ParseConfig.new(config_path)
rescue
  $stderr.puts "#{progname}: error reading #{config_path}: #{$!}"
  exit EX_DATAERR
end

config = {}
%w(daemonize inputs flush_interval outputs prefix percentile
   inject_timer_names suffix preserve_counters).each do |key|
  config[key.to_sym] = config_file[key] if config_file[key]
end

if config[:inputs].nil? || config[:inputs].empty?
  $stderr.puts "#{progname}: no inputs specified"
  exit EX_DATAERR
end

if config[:outputs].nil? || config[:outputs].empty?
  $stderr.puts "#{progname}: no outputs specified"
  exit EX_DATAERR
end

config[:inputs] = config[:inputs].split(/, */)
input_config = {}
config[:inputs].each do |input|
  input_config[input] = config_file["input:#{input}"] || {}
end

config[:outputs] = config[:outputs].split(/, */)
output_config = {}
config[:outputs].each do |output|
  output_config[output] = config_file["output:#{output}"] || {}
end

if config_file["daemonize"] == "true"
  if config[:outputs].include?("stdout")
    $stderr.puts "#{progname}: output stdout is not compatible with daemonize"
    exit EX_DATAERR
  end
  Daemons.daemonize(:app_name => progname)
end

EM.run do
  s = StatsdServer.new(config, input_config, output_config)
  s.run
end
